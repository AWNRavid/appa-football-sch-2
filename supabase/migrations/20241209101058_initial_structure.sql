create table "public"."user_profiles" (
    "id" uuid not null,
    "created_at" timestamp with time zone not null default now(),
    "updated_at" timestamp with time zone not null default now(),
    "deleted_at" timestamp with time zone,
    "name" text
);


alter table "public"."user_profiles" enable row level security;

create table "public"."user_role_members" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "updated_at" timestamp with time zone not null default now(),
    "user_id" uuid not null,
    "user_role_id" smallint not null default '1'::smallint
);


alter table "public"."user_role_members" enable row level security;

create table "public"."user_roles" (
    "id" smallint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "updated_at" timestamp with time zone not null default now(),
    "name" text not null
);


alter table "public"."user_roles" enable row level security;

CREATE UNIQUE INDEX unique_user_and_user_role_id ON public.user_role_members USING btree (user_id, user_role_id);

CREATE UNIQUE INDEX user_profiles_pkey ON public.user_profiles USING btree (id);

CREATE UNIQUE INDEX user_role_members_pkey ON public.user_role_members USING btree (id);

CREATE UNIQUE INDEX user_roles_pkey ON public.user_roles USING btree (id);

alter table "public"."user_profiles" add constraint "user_profiles_pkey" PRIMARY KEY using index "user_profiles_pkey";

alter table "public"."user_role_members" add constraint "user_role_members_pkey" PRIMARY KEY using index "user_role_members_pkey";

alter table "public"."user_roles" add constraint "user_roles_pkey" PRIMARY KEY using index "user_roles_pkey";

alter table "public"."user_profiles" add constraint "user_profiles_id_fkey" FOREIGN KEY (id) REFERENCES auth.users(id) ON DELETE CASCADE not valid;

alter table "public"."user_profiles" validate constraint "user_profiles_id_fkey";

alter table "public"."user_role_members" add constraint "unique_user_and_user_role_id" UNIQUE using index "unique_user_and_user_role_id";

alter table "public"."user_role_members" add constraint "user_role_members_user_id_fkey" FOREIGN KEY (user_id) REFERENCES auth.users(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."user_role_members" validate constraint "user_role_members_user_id_fkey";

alter table "public"."user_role_members" add constraint "user_role_members_user_role_id_fkey" FOREIGN KEY (user_role_id) REFERENCES user_roles(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."user_role_members" validate constraint "user_role_members_user_role_id_fkey";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.handle_new_user()
 RETURNS trigger
 LANGUAGE plpgsql
 SECURITY DEFINER
 SET search_path TO ''
AS $function$begin
  INSERT INTO public.user_profiles (id, name)
  VALUES (
      new.id, 
      COALESCE(new.raw_user_meta_data ->> 'name', null)
  );
  INSERT INTO public.user_role_members (user_id)
  VALUES (
      new.id
  );

  RETURN new;
end;$function$
;

grant delete on table "public"."user_profiles" to "anon";

grant insert on table "public"."user_profiles" to "anon";

grant references on table "public"."user_profiles" to "anon";

grant select on table "public"."user_profiles" to "anon";

grant trigger on table "public"."user_profiles" to "anon";

grant truncate on table "public"."user_profiles" to "anon";

grant update on table "public"."user_profiles" to "anon";

grant delete on table "public"."user_profiles" to "authenticated";

grant insert on table "public"."user_profiles" to "authenticated";

grant references on table "public"."user_profiles" to "authenticated";

grant select on table "public"."user_profiles" to "authenticated";

grant trigger on table "public"."user_profiles" to "authenticated";

grant truncate on table "public"."user_profiles" to "authenticated";

grant update on table "public"."user_profiles" to "authenticated";

grant delete on table "public"."user_profiles" to "service_role";

grant insert on table "public"."user_profiles" to "service_role";

grant references on table "public"."user_profiles" to "service_role";

grant select on table "public"."user_profiles" to "service_role";

grant trigger on table "public"."user_profiles" to "service_role";

grant truncate on table "public"."user_profiles" to "service_role";

grant update on table "public"."user_profiles" to "service_role";

grant delete on table "public"."user_role_members" to "anon";

grant insert on table "public"."user_role_members" to "anon";

grant references on table "public"."user_role_members" to "anon";

grant select on table "public"."user_role_members" to "anon";

grant trigger on table "public"."user_role_members" to "anon";

grant truncate on table "public"."user_role_members" to "anon";

grant update on table "public"."user_role_members" to "anon";

grant delete on table "public"."user_role_members" to "authenticated";

grant insert on table "public"."user_role_members" to "authenticated";

grant references on table "public"."user_role_members" to "authenticated";

grant select on table "public"."user_role_members" to "authenticated";

grant trigger on table "public"."user_role_members" to "authenticated";

grant truncate on table "public"."user_role_members" to "authenticated";

grant update on table "public"."user_role_members" to "authenticated";

grant delete on table "public"."user_role_members" to "service_role";

grant insert on table "public"."user_role_members" to "service_role";

grant references on table "public"."user_role_members" to "service_role";

grant select on table "public"."user_role_members" to "service_role";

grant trigger on table "public"."user_role_members" to "service_role";

grant truncate on table "public"."user_role_members" to "service_role";

grant update on table "public"."user_role_members" to "service_role";

grant delete on table "public"."user_roles" to "anon";

grant insert on table "public"."user_roles" to "anon";

grant references on table "public"."user_roles" to "anon";

grant select on table "public"."user_roles" to "anon";

grant trigger on table "public"."user_roles" to "anon";

grant truncate on table "public"."user_roles" to "anon";

grant update on table "public"."user_roles" to "anon";

grant delete on table "public"."user_roles" to "authenticated";

grant insert on table "public"."user_roles" to "authenticated";

grant references on table "public"."user_roles" to "authenticated";

grant select on table "public"."user_roles" to "authenticated";

grant trigger on table "public"."user_roles" to "authenticated";

grant truncate on table "public"."user_roles" to "authenticated";

grant update on table "public"."user_roles" to "authenticated";

grant delete on table "public"."user_roles" to "service_role";

grant insert on table "public"."user_roles" to "service_role";

grant references on table "public"."user_roles" to "service_role";

grant select on table "public"."user_roles" to "service_role";

grant trigger on table "public"."user_roles" to "service_role";

grant truncate on table "public"."user_roles" to "service_role";

grant update on table "public"."user_roles" to "service_role";


create policy "Enable read access for all users"
on "public"."user_role_members"
as permissive
for select
to public
using (true);


create policy "Enable read access for all users"
on "public"."user_roles"
as permissive
for select
to public
using (true);



